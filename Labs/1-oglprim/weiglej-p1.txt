Justin Weigle
Primitives Lab (Lab 1)

Q1:     It seems to round up to the nearest pixel since the smallest thing that
        can be rendered is a single pixel

Q2:     GL_LINES
            When 2 vertices are provided for GL_LINES it creates a line between
            those two points, and when 4 are provided it just creates lines
            between first and second point and between the third and fourth
            point but not between the second and third.
        GL_LINE_STRIP
            GL_LINE_STRIP, unlike GL_LINES, connects each new vertex added to
            the previous one. It does not connect the last one declared to the
            first, however.
        GL_LINE_LOOP
            GL_LINE_STRIP works like GL_LINE_STRIP, but it also connects the
            last vertex back to the first.

Q3:     When an odd number of vertices is provided to GL_LINES it draws nothing
        for the final vertex 

Q4:     The same as Q1, it seems to round up to the nearest whole pixel value

Q5:     GL_TRIANGLES
            This makes 2 separate triangles with the 6 vertices where the first
            3 make one triangle and the second 3 make another
        GL_TRIANGLE_STRIP
            This makes it so that every new vertex that is added connects or
            attempts to connect to the previous two vertices added
        GL_TRIANGLE_FAN
            This takes each vertex and connects lines between them to create a
            set of triangles that don't have intersecting edges and form one
            big convex polygon made from triangles

Q6:     GL_TRIANGLES
            Adding one more vertex does nothing, and so does adding two.
        GL_TRIANGLE_STRIP
            Adding one more vertex results in that vertex being connected
            to the previous two vertices to create another triangle
        GL_TRIANGLE_FAN
            Adding one more vertex results in the first vertex being connected
            to it as well as the last vertex, and it causes intersection of the
            edges due to placement

Q7:     GL_QUADS
            Processes vertices in the order given and connects 4 vertices
            together to make a quadrilateral
        GL_QUAD_STRIP
            Processes vertices expecting both left, then both right
            vertices, or vice versa. Or both top followed by both bottom or
            vice versa

Q8:     Order with no intersections: 
            (10, 160), 
            (40, 160), 
            (10, 100), 
            (40, 100), 
            (10, 40), 
            (40, 40), 
            (10, 10), 
            (40, 10)

Q9:     It will likely have no impact on GL_QUADS, but will try to create
        another quadrilateral for GL_QUAD_STRIP

Q10:    Line mode worked fine, fill mode was not so fine... (image in Images
        folder)

Q11:    The pentagon is not filled in, but the outer triangles are

Q12:    
        glBegin (GL_POLYGON);
            glVertex2s (0, 60);
            glEdgeFlag(GL_FALSE);
            glVertex2s (26, 41);
            glEdgeFlag(GL_TRUE);
            glVertex2s (32, 60);
        glEnd ();
        glBegin (GL_POLYGON);
            glVertex2s (16, 10);
            glEdgeFlag(GL_FALSE);
            glVertex2s (42, 29);
            glEdgeFlag(GL_TRUE);
            glVertex2s (26, 41);
        glEnd ();
        glBegin (GL_POLYGON);
            glVertex2s (68, 10);
            glEdgeFlag(GL_FALSE);
            glVertex2s (59, 41);
            glEdgeFlag(GL_TRUE);
            glVertex2s (42, 29);
        glEnd ();
        glBegin (GL_POLYGON);
            glVertex2s (84, 60);
            glEdgeFlag(GL_FALSE);
            glVertex2s (52, 60);
            glEdgeFlag(GL_TRUE);
            glVertex2s (59, 41);
        glEnd ();
        glBegin (GL_POLYGON);
            glVertex2s (42, 90);
            glEdgeFlag(GL_FALSE);
            glVertex2s (32, 60);
            glEdgeFlag(GL_TRUE);
            glVertex2s (52, 60);
        glEnd ();
